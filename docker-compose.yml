services:
  auth-pg:
    image: postgres:16.3-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB__AUTH_PG_USER}
      POSTGRES_PASSWORD: ${DB__AUTH_PG_PASSWORD}
      POSTGRES_DB: ${DB__AUTH_PG_DB}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    ports:
      - "35432:5432"
    healthcheck:
      test: pg_isready -U ${DB__AUTH_PG_USER} -d ${DB__AUTH_PG_DB}
      interval: 5s
      timeout: 3s
      retries: 3

  catalog-pg:
    image: postgres:16.3-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB__CATALOG_PG_USER}
      POSTGRES_PASSWORD: ${DB__CATALOG_PG_PASSWORD}
      POSTGRES_DB: ${DB__CATALOG_PG_DB}
    volumes:
      - catalog_pg_data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    healthcheck:
      test: pg_isready -U ${DB__CATALOG_PG_USER} -d ${DB__CATALOG_PG_DB}
      interval: 5s
      timeout: 3s
      retries: 3

  orders-pg:
    image: postgres:16.3-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB__ORDERS_PG_USER}
      POSTGRES_PASSWORD: ${DB__ORDERS_PG_PASSWORD}
      POSTGRES_DB: ${DB__ORDERS_PG_DB}
    volumes:
      - orders_pg_data:/var/lib/postgresql/data
    ports:
      - "25432:5432"
    healthcheck:
      test: pg_isready -U ${DB__ORDERS_PG_USER} -d ${DB__ORDERS_PG_DB}
      interval: 5s
      timeout: 3s
      retries: 3

  reviews-mongo:
    image: mongo:7.0.21
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB__REVIEWS_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB__REVIEWS_MONGO_PASSWORD}
    volumes:
      - reviews_mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 3s
      retries: 3

  mongo-express:
    image: mongo-express:1.0.2-20
    restart: always
    depends_on:
      - reviews-mongo
    environment:
      ME_CONFIG_MONGODB_SERVER: reviews-mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB__REVIEWS_MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB__REVIEWS_MONGO_PASSWORD}
      ME_CONFIG_BASICAUTH: false
    ports:
      - "8081:8081"

  auth-api:
    build:
      context: auth_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      auth-pg:
        condition: service_healthy
    volumes:
      - ./auth_service/app/:/app
    ports:
      - "8003:8000"
    env_file:
      - ./auth_service/.env

  catalog-api:
    build:
      context: catalog_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      catalog-pg:
        condition: service_healthy
    volumes:
      - ./catalog_service/app/:/app
    ports:
      - "8000:8000"
    env_file:
      - ./catalog_service/.env

  orders-api:
    build:
      context: orders_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      orders-pg:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./orders_service/app/:/app
    ports:
      - "8001:8000"
    env_file:
      - ./orders_service/.env

  reviews-api:
    build:
      context: reviews_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      reviews-mongo:
        condition: service_healthy
    volumes:
      - ./reviews_service/app/:/app
    ports:
      - "8002:8000"
    env_file:
      - ./reviews_service/.env

  order-worker:
    build:
      context: order_worker_service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./order_worker_service/app/:/app
    env_file:
      - order_worker_service/.env

  celery-worker:
    build:
      context: celery_worker_service
      dockerfile: Dockerfile
    restart: always
    command: ["celery", "-A", "celery_app", "worker", "--loglevel=info"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./celery_worker_service/app/:/app
    env_file:
      - celery_worker_service/.env

  celery-beat:
    build:
      context: celery_worker_service
      dockerfile: Dockerfile
    restart: always
    command: ["celery", "-A", "celery_app", "beat", "--loglevel=info"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./celery_worker_service/app/:/app
    env_file:
      - celery_worker_service/.env

  kafka:
    image: confluentinc/cp-kafka:7.9.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CLUSTER_ID: MkU3BE5OTNcwNTK4NDR2Qk
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 5s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.4.3-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ]  # Enable saving to disk (AOF)
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 3s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.53.5
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - auth-api
      - catalog-api
      - orders-api
      - reviews-api

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus

volumes:
  catalog_pg_data:
  orders_pg_data:
  reviews_mongo_data:
  auth_pg_data:
  kafka_data:
  redis_data:
  grafana_data: